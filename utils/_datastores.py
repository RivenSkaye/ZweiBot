import json
import asqlite
from pathlib import Path
import os
from typing import Union, Dict, Optional
from abc import ABC

class DataStore(ABC):
    """Object oriented approach for abstracting different types of datastores.

    This is a base class that defines several methods. The aim of it is to
    abstract different types of datastores like JSON, sqlite or csv away so
    that the main focus can be the application.

    The use-case it's written for is a Discord bot, where depending on how
    much activity it sees, the requirements for data integrity and the
    performance impact of the size may differ depending on the host. That said,
    the concept can be useful in many other cases as well.

    For all of the functions/methods in this class, there are some typical
    datastore parameters that are required, though may be different depending
    on the backing engine. A list of these:
    - table: The table to call upon. For JSON this would be the top-level key,
    - key: the ID or key for the row to get. For JSON this is the 2nd level key,
        - For normal databases, this is probably some autogenerated value;
        - For text-based formats this might be a required field;
        - In order to make it not required, implement this base class with an
            auto-increment option or something similar;
    - data: the data to set or change for the selected row.

    This class is written with the intent of not raising during runtime.
    Instead, either make the error value in the return descriptive or log the
    failure for debugging and make sure the application handles this correctly.
    """
    @abstractmethod
    async def get(table: str, key: Union[str,int]) -> Dict:
        """ Simple get function that returns a row or object from the DB.

        The return value is a dict containing the keys and values. If an
        implementation would rather return a list, either override this or
        shove the list into a dict.
        On errors, the error key should be set in the dict.
        """
        pass

    @abstractmethod
    async def set(table: str, data: Dict, key: Optional[Union[str,int]]) -> bool:
        """ Function to add data to the DB. Make sure to handle caching!

        This is a blueprint function, so some implementations might use some
        form of caching like Redis or whatever MongoDB uses. Please do not
        defile my code by using it for Mongo though, it's bad and dangerous.

        The return value is `True` if successful, or `False` if not.
        """
        pass

    @abstractmethod
    async def update(table: str, key: Union[str,int], data: Dict) -> Dict:
        """ Update function for rows/entries in a datastore.

        The data object only has to contain the changed values, since dicts
        allow updating values in A only if they match keys in B. This means
        that the internal logic may very well just be
        `self.get(table,key).update(data)` followed by a saving it to disk.

        The return value should be the fully updated row, the fully updated
        datastore (for formats like JSON and csv) and it should have the error
        key set if something goes wrong.
        """
        pass
